(inlp.text.window
Window
p1
(dp2
S'topics'
p3
(lp4
(inlp.text.topic
Topic
p5
(dp6
S'reasons'
p7
(lp8
S'No similar topics (to 0) scores:([(2, 0), (1, 0), (1, 0)])'
p9
aS'len(1) < 3 and distances([0.54949126842986729])'
p10
aS'len(2) < 3 and distances([0.4767096159607096, 0.6559426160817835])'
p11
aS'len(3) < 10 and distances([0.36919351772293035, 0.67642234306249216, 0.79157760921931775])'
p12
aS'len(4) < 10 and distances([0.44795062103655997, 0.72350617224004732, 0.58629093576527547, 0.70281477576113038])'
p13
aS'len(5) < 10 and distances([0.40824993660274467, 0.64402996653921918, 0.61079099490500166, 0.75466280329837621, 0.776670606735268])'
p14
aS'len(6) < 10 and distances([0.51235431339018911, 0.49162986381045848, 0.54299683808055177, 0.51205120641987645, 0.3976298309253411, 0.45269847104229977])'
p15
aS'len(7) < 10 and distances([0.47136431398156875, 0.59563267838902401, 0.55817941656421499, 0.59732753451385756, 0.60485940276210348, 0.73041772058772303, 0.44309464458936332])'
p16
aS'len(8) < 10 and distances([0.48770067809575529, 0.56528651158963905, 0.56793930975132201, 0.60040709615752441, 0.63561787863776953, 0.65177769239636407, 0.30348691991178434, 0.56823839987272851])'
p17
aS'len(9) < 10 and distances([0.40659630153377063, 0.51458849118389349, 0.53068202912193174, 0.58913777896751296, 0.63664489381039335, 0.60837278772744485, 0.28183957297595097, 0.56141729147033537, 0.57620794447944834])'
p18
asS'messages'
p19
(lp20
ccopy_reg
_reconstructor
p21
(cnlp.text.message
Message
p22
c__builtin__
object
p23
NtRp24
(dp25
S'author'
p26
VU2BTFJNPL
p27
sS'text_repr'
p28
NsS'text'
p29
V:slightly_smiling_face: this is really cool stuff
p30
sS'repr_id'
p31
NsS'timestamp'
p32
cpendulum.pendulum
Pendulum
p33
(I2016
I9
I18
I17
I13
I48
I12
F0
tRp34
sS'id'
p35
V1474218828.000012
p36
sbag21
(g22
g23
NtRp37
(dp38
g26
VU2C9M9GP5
p39
sg28
Nsg29
VNice. Hopefully NLP class will give you some good resources as well.
p40
sg31
Nsg32
g33
(I2016
I9
I18
I17
I23
I29
I13
F0
tRp41
sg35
V1474219409.000013
p42
sbag21
(g22
g23
NtRp43
(dp44
g26
VU2C9M9GP5
p45
sg28
Nsg29
Vjust googling around I found this. I don't really understand it, but thought I'd share.
p46
sg31
Nsg32
g33
(I2016
I9
I21
I1
I9
I17
I2
F0
tRp47
sg35
V1474420157.000002
p48
sbag21
(g22
g23
NtRp49
(dp50
g26
VU2C9M9GP5
p51
sg28
Nsg29
Vwhich may or may not be related to this project, which I also don't really understand
p52
sg31
Nsg32
g33
(I2016
I9
I21
I1
I10
I26
I5
F0
tRp53
sg35
V1474420226.000005
p54
sbag21
(g22
g23
NtRp55
(dp56
g26
VU2C5M1L6L
p57
sg28
Nsg29
Vstarting to work on this now FINALLY
p58
sg31
Nsg32
g33
(I2016
I9
I21
I16
I43
I54
I5
F0
tRp59
sg35
V1474476234.000005
p60
sbag21
(g22
g23
NtRp61
(dp62
g26
VU2C9M9GP5
p63
sg28
Nsg29
VIndeed I have seen those projects mentioned for this purpose. Can you give me a 10000 foot explanation of what 'serialization' mean?
p64
sg31
Nsg32
g33
(I2016
I9
I21
I17
I12
I22
I19
F0
tRp65
sg35
V1474477942.000019
p66
sbag21
(g22
g23
NtRp67
(dp68
g26
VU2BTFJNPL
p69
sg28
Nsg29
VLike what happens with accents and other non-ASCII chars
p70
sg31
Nsg32
g33
(I2016
I9
I21
I17
I16
I5
I28
F0
tRp71
sg35
V1474478165.000028
p72
sbag21
(g22
g23
NtRp73
(dp74
g26
VU2C5M1L6L
p75
sg28
Nsg29
Vyeah serialization tends to be the transformation of data to a standard format
p76
sg31
Nsg32
g33
(I2016
I9
I21
I19
I22
I26
I29
F0
tRp77
sg35
V1474485746.000029
p78
sbag21
(g22
g23
NtRp79
(dp80
g26
VU2C5M1L6L
p81
sg28
Nsg29
V^^^ long but vvv worth the read
p82
sg31
Nsg32
g33
(I2016
I9
I22
I0
I35
I28
I4
F0
tRp83
sg35
V1474504528.000004
p84
sbag21
(g22
g23
NtRp85
(dp86
g26
VU2C9M9GP5
p87
sg28
Nsg29
VStill working through it, but this blog post seems pertinent to our usecase
p88
sg31
Nsg32
g33
(I2016
I9
I24
I20
I18
I55
I2
F0
tRp89
sg35
V1474748335.000002
p90
sbasS'start_message'
p91
g24
sS'last_timestamp'
p92
g89
sba(inlp.text.topic
Topic
p93
(dp94
g7
(lp95
S'No similar topics (to 0) scores:([(6, 4), (1, 0), (10, 9), (2, 0), (1, 0), (1, 0)])'
p96
aS'len(1) < 3 and distances([0.51307060858976083])'
p97
aS'len(2) < 3 and distances([0.46802098268440662, 0.32118337847136891])'
p98
aS'len(3) < 10 and distances([0.58456109949091772, 0.16949531381232907, 0.40362016822657015])'
p99
aS'len(4) < 10 and distances([0.7335960110648202, 0.42799379927020431, 0.35556377717969201, 0.66759583196660033])'
p100
aS'len(5) < 10 and distances([0.71273707284402976, 0.25130027498114171, 0.51289860357272021, 0.65988093594073338, 0.71164461804260115])'
p101
asg19
(lp102
g21
(g22
g23
NtRp103
(dp104
g26
VU2BTFJNPL
p105
sg28
Nsg29
VAgain... My understanding here...  But serialization for me just means standardizing into an object that will be readable and has follows some (usually java) format
p106
sg31
Nsg32
g33
(I2016
I9
I21
I17
I13
I41
I22
F0
tRp107
sg35
V1474478021.000022
p108
sbag21
(g22
g23
NtRp109
(dp110
g26
VU2C9M9GP5
p111
sg28
Nsg29
Vokay so JSON is a serialization
p112
sg31
Nsg32
g33
(I2016
I9
I21
I17
I14
I8
I23
F0
tRp113
sg35
V1474478048.000023
p114
sbag21
(g22
g23
NtRp115
(dp116
g26
VU2BTFJNPL
p117
sg28
Nsg29
VBasically, pickle is a serializer for python objects 
p118
sg31
Nsg32
g33
(I2016
I9
I21
I17
I14
I12
I24
F0
tRp119
sg35
V1474478052.000024
p120
sbag21
(g22
g23
NtRp121
(dp122
g26
VU2C9M9GP5
p123
sg28
Nsg29
Vas well as many other well known formats
p124
sg31
Nsg32
g33
(I2016
I9
I21
I17
I14
I16
I25
F0
tRp125
sg35
V1474478056.000025
p126
sbag21
(g22
g23
NtRp127
(dp128
g26
VU2BTFJNPL
p129
sg28
Nsg29
VThat is a question I have... But I would say JSON can serve as the serialized final format
p130
sg31
Nsg32
g33
(I2016
I9
I21
I17
I14
I54
I26
F0
tRp131
sg35
V1474478094.000026
p132
sbag21
(g22
g23
NtRp133
(dp134
g26
VU2BTFJNPL
p135
sg28
Nsg29
VAlthough there might be some additional things as text encoding
p136
sg31
Nsg32
g33
(I2016
I9
I21
I17
I15
I11
I27
F0
tRp137
sg35
V1474478111.000027
p138
sbasg91
g103
sg92
g137
sba(inlp.text.topic
Topic
p139
(dp140
g7
(lp141
S'No similar topics (to 0) scores:([(10, 0), (5, 0), (2, 0), (1, 0), (1, 0)])'
p142
asg19
(lp143
g21
(g22
g23
NtRp144
(dp145
g26
VU2BTFJNPL
p146
sg28
Nsg29
VEither Flume or Avro both apache projects 
p147
sg31
Nsg32
g33
(I2016
I9
I21
I17
I11
I33
I18
F0
tRp148
sg35
V1474477893.000018
p149
sbasg91
g144
sg92
Nsba(inlp.text.topic
Topic
p150
(dp151
g7
(lp152
S'No similar topics (to 0) scores:([(5, 3), (2, 0), (1, 0), (1, 0)])'
p153
aS'len(1) < 3 and distances([0.42265365454460346])'
p154
aS'len(2) < 3 and distances([0.63014659195675315, 0.61748867858155343])'
p155
aS'len(3) < 10 and distances([0.50129650027407946, 0.41529161454198588, 0.76121588229809423])'
p156
aS'len(4) < 10 and distances([0.44693216796452478, 0.51697623488533928, 0.71151691984931187, 0.57843813673814326])'
p157
aS'len(5) < 10 and distances([0.44639014234388386, 0.44458737043034963, 0.76924822014273497, 0.62933634744317135, 0.71028705693203165])'
p158
aS'len(6) < 10 and distances([0.44366678107297647, 0.61845446243778024, 0.73568137743727857, 0.62133987345714137, 0.73356336103524722, 0.66961621515805547])'
p159
aS'len(7) < 10 and distances([0.5131719766861853, 0.55465992075789483, 0.7173742498512653, 0.7321326742345774, 0.54776936306487511, 0.48954203281170283, 0.55986400933429403])'
p160
aS'len(8) < 10 and distances([0.47289822270976911, 0.42662230975023852, 0.7995945154756644, 0.77741803490114525, 0.64937991745986257, 0.72222051948460109, 0.6541610769393531, 0.68509132340042922])'
p161
aS'len(9) < 10 and distances([0.47756466260688063, 0.50020023743939324, 0.70525062018228657, 0.75222467682886329, 0.72545523187623251, 0.63819401595581149, 0.75873412710629795, 0.60956454511319491, 0.73003792829579972])'
p162
asg19
(lp163
g21
(g22
g23
NtRp164
(dp165
g26
VU2C5M1L6L
p166
sg28
Nsg29
Vagreed <@U2C9M9GP5> from the reading I have done I am siding with the RTM API
p167
sg31
Nsg32
g33
(I2016
I9
I21
I16
I44
I27
I6
F0
tRp168
sg35
V1474476267.000006
p169
sbag21
(g22
g23
NtRp170
(dp171
g26
VU2C5M1L6L
p172
sg28
Nsg29
V`open question`: what is a partition of a log for kafka? is this similar to the partitioning that happens in the MapReduce framework?
p173
sg31
Nsg32
g33
(I2016
I9
I21
I16
I55
I22
I7
F0
tRp174
sg35
V1474476922.000007
p175
sbag21
(g22
g23
NtRp176
(dp177
g26
VU2C5M1L6L
p178
sg28
Nsg29
V```Log Aggregation\u000a\u000aMany people use Kafka as a replacement for a log aggregation solution. Log aggregation typically collects physical log files off servers and puts them in a central place (a file server or HDFS perhaps) for processing. Kafka abstracts away the details of files and gives a cleaner abstraction of log or event data as a stream of messages. This allows for lower-latency processing and easier support for multiple data sources and distributed data consumption. In comparison to log-centric systems like Scribe or Flume, Kafka offers equally good performance, stronger durability guarantees due to replication, and much lower end-to-end latency.```
p179
sg31
Nsg32
g33
(I2016
I9
I21
I16
I59
I22
I8
F0
tRp180
sg35
V1474477162.000008
p181
sbag21
(g22
g23
NtRp182
(dp183
g26
VU2C5M1L6L
p184
sg28
Nsg29
V<@U2C9M9GP5> sounds like we may be able to have Kafka listen to a lightweight producer tied directly to slack? rather than Flume + Kafka
p185
sg31
Nsg32
g33
(I2016
I9
I21
I17
I0
I30
I9
F0
tRp186
sg35
V1474477230.000009
p187
sbag21
(g22
g23
NtRp188
(dp189
g26
VU2BTFJNPL
p190
sg28
Nsg29
VMy understanding is that they are indeed something similar 
p191
sg31
Nsg32
g33
(I2016
I9
I21
I17
I1
I15
I10
F0
tRp192
sg35
V1474477275.000010
p193
sbag21
(g22
g23
NtRp194
(dp195
g26
VU2BTFJNPL
p196
sg28
Nsg29
VYou keep separate queues for different types of messages
p197
sg31
Nsg32
g33
(I2016
I9
I21
I17
I1
I52
I11
F0
tRp198
sg35
V1474477312.000011
p199
sbag21
(g22
g23
NtRp200
(dp201
g26
VU2C9M9GP5
p202
sg28
Nsg29
VYeah that's my understanding as well. A particular topic is guaranteed to go to a particular partition. And then each partition passively replicates to the number of nodes equal to the replication factor.
p203
sg31
Nsg32
g33
(I2016
I9
I21
I17
I8
I34
I14
F0
tRp204
sg35
V1474477714.000014
p205
sbag21
(g22
g23
NtRp206
(dp207
g26
VU2C9M9GP5
p208
sg28
Nsg29
VMy mental model is still pretty fuzzy though. Something like Slack RTM Api &gt;&gt; ??? &gt;&gt; Kafka
p209
sg31
Nsg32
g33
(I2016
I9
I21
I17
I9
I29
I15
F0
tRp210
sg35
V1474477769.000015
p211
sbag21
(g22
g23
NtRp212
(dp213
g26
VU2C9M9GP5
p214
sg28
Nsg29
VThe particulars of the ??? as still hazy. It seems like we should be able to take incoming messages and send them along as messages to the kafka server. But how do we do this in a resilient and scalable way I'm not quiet sure.
p215
sg31
Nsg32
g33
(I2016
I9
I21
I17
I10
I20
I16
F0
tRp216
sg35
V1474477820.000016
p217
sbag21
(g22
g23
NtRp218
(dp219
g26
VU2BTFJNPL
p220
sg28
Nsg29
VWe would need some sort of serialization in the middle right?
p221
sg31
Nsg32
g33
(I2016
I9
I21
I17
I10
I25
I17
F0
tRp222
sg35
V1474477825.000017
p223
sbasg91
g164
sg92
g222
sba(inlp.text.topic
Topic
p224
(dp225
g7
(lp226
S'No similar topics (to 0) scores:([(1, 0), (1, 0)])'
p227
aS'len(1) < 3 and distances([0.55818406822222211])'
p228
asg19
(lp229
g21
(g22
g23
NtRp230
(dp231
g26
VU2C9M9GP5
p232
sg28
Nsg29
Vwhich I'm not really familiar with
p233
sg31
Nsg32
g33
(I2016
I9
I18
I17
I12
I50
I8
F0
tRp234
sg35
V1474218770.000008
p235
sbag21
(g22
g23
NtRp236
(dp237
g26
VU2BTFJNPL
p238
sg28
Nsg29
VI'm reading up on NLP meanwhile
p239
sg31
Nsg32
g33
(I2016
I9
I18
I17
I13
I29
I11
F0
tRp240
sg35
V1474218809.000011
p241
sbasg91
g230
sg92
g240
sba(inlp.text.topic
Topic
p242
(dp243
g7
(lp244
S'No similar topics (to 0) scores:([(1, 0)])'
p245
asg19
(lp246
g21
(g22
g23
NtRp247
(dp248
g26
VU2C9M9GP5
p249
sg28
Nsg29
VNo, the tutorial is using a websocket connection
p250
sg31
Nsg32
g33
(I2016
I9
I18
I17
I12
I45
I7
F0
tRp251
sg35
V1474218765.000007
p252
sbasg91
g247
sg92
Nsba(inlp.text.topic
Topic
p253
(dp254
g7
(lp255
S'First message'
p256
asg19
(lp257
g21
(g22
g23
NtRp258
(dp259
g26
VU2BTFJNPL
p260
sg28
Nsg29
Vare you using outgoing webhooks for pushing the messages out?
p261
sg31
Nsg32
g33
(I2016
I9
I18
I17
I10
I50
I4
F0
tRp262
sg35
V1474218650.000004
p263
sbasg91
g258
sg92
NsbasS'window_size'
p264
Finf
sb.